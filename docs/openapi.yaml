openapi: 3.0.0
info:
  title: Price Monitor
  version: 1.0.0
  description: API documentation for the Price Monitor application

servers:
  - url: http://localhost:80/api/
    description: Local development server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        email_verified_at:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Advert:
      type: object
      properties:
        url:
          type: string
        email:
          type: string

paths:
  /register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
      responses:
        201:
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Bad request

  /login:
    post:
      summary: Login a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        401:
          description: Unauthorized

  /logout:
    post:
      summary: Logout the authenticated user
      security:
        - bearerAuth: []
      responses:
        200:
          description: User logged out successfully
        401:
          description: Unauthorized

  /auth-user:
    get:
      summary: Get authenticated user details
      security:
        - bearerAuth: []
      responses:
        200:
          description: Authenticated user details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          description: Unauthorized

  /confirm-email:
    post:
      summary: Submit confirmation link received by email
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                link:
                  type: string
                  description: The confirmation link the user received by email.
              required:
                - link
      responses:
        200:
          description: Email confirmed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Email confirmed successfully.
        400:
          description: Bad request (invalid or missing link)
        401:
          description: Unauthorized (invalid or expired confirmation link)


  /adverts:
    get:
      summary: Get a list of subscriptions for the authenticated user
      security:
        - bearerAuth: []
      responses:
        200:
          description: List of subscriptions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Advert'
        401:
          description: Unauthorized

    post:
      summary: Create a new subscription
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                url:
                  type: string
                email:
                  type: string
                  description: "Email must be a valid email address or left empty"
              required:
                - url
      responses:
        201:
          description: Subscription created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Advert'
        400:
          description: Bad request
        401:
          description: Unauthorized

  /adverts/{advert}:
    delete:
      summary: Unsubscribe the advert
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: advert
          required: true
          description: The ID of the advert to be unsubscribed
          schema:
            type: integer
      responses:
        200:
          description: Advert deleted successfully
        401:
          description: Unauthorized
        403:
          description: Forbidden
        404:
          description: Advert not found
